type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: Int
    orderBy: UserOrderBy
  ): [User!]!
  posts(
    query: String
    first: Int
    skip: Int
    after: Int
    orderBy: PostOrderBy
  ): [Post!]!
  comments(
    first: Int
    skip: Int
    after: Int
    orderBy: CommentOrderBy
  ): [Comment!]!
  post(id: Int!): Post!
  me: User!
  myPosts(
    query: String
    first: Int
    skip: Int
    after: Int
    orderBy: PostOrderBy
  ): [Post!]!
}

scalar DateTime

type User {
  id: Int!
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: Int!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: Int!
  text: String!
  author: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SortOrder {
  asc
  desc
}

input UserOrderBy {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostOrderBy {
  id: SortOrder
  title: SortOrder
  body: SortOrder
  published: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CommentOrderBy {
  id: SortOrder
  text: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: Int!, data: UpdatePostInput!): Post!
  deletePost(id: Int!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: Int!, data: UpdateCommentInput!): Comment!
  deleteComment(id: Int!): Comment!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  post: Int!
}

input UpdateCommentInput {
  text: String
}

type Subscription {
  comment(postId: Int!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}
